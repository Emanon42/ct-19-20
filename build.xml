<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- SCC Ant build file
     @author Daniel HillerstrÃ¶m (dhil)
     @description This file is a (mostly) generic ant build file for your SCC project.
                  You might have to change the value of the attribute "name" inside
                  the "project"-tag below. The value should the name of your project.

		  You can import this build file into Eclipse or IntelliJ.
                  In addition, you can use it directly from the commandline:
		     $ ant build
		  The above command will build your compiler. Ant will create
	          and output your compiler in directory called "bin".
                  After a successful build you can run your compiler by typing
                     $ java -cp bin Main

		  To clean "bin" simply type
		     $ ant clean
		  on the commandline.		     
		  -->
<!-- Replace the value of the attribute "name" with the name of YOUR project. -->
<project basedir="." default="build" name="ct-19-20">
  <!-- You do not need to touch anything below this comment -->
  <property name="src" location="src"/>
  <property name="bin" location="bin"/>
  <property environment="env"/>
  <property name="debuglevel" value="source,lines,vars"/>
  <property name="target" value="1.8"/>
  <property name="source" value="1.8"/> 

  <target name="init">
    <tstamp/>
    <mkdir dir="${bin}"/>
    <copy includeemptydirs="false" todir="${bin}">
      <fileset dir="${src}">
        <exclude name="**/*.launch"/>
        <exclude name="**/*.java"/>
	<exclude name="**/*.class"/>
      </fileset>
    </copy>
  </target>
  <target name="clean">
    <delete dir="${bin}"/>
  </target>
  <target depends="clean" name="cleanall"/>
  <target depends="build-subprojects,build-project" name="build"/>
  <target name="build-subprojects"/>
  <target depends="init" name="build-project">
    <echo message="${ant.project.name}: ${ant.file}"/>
    <javac debug="true" debuglevel="${debuglevel}" destdir="bin" includeantruntime="false" source="${source}" target="${target}">
      <src path="src"/>      
    </javac>
  </target>
  <target description="Build all projects which reference this project. Useful to propagate changes." name="build-refprojects"/>
  <target name="Main">
    <java classname="Main" failonerror="true" fork="yes" classpath="${bin}">
      <arg line="-parser tests/simple.c tests/simple.out"/>
    </java>
  </target>
</project>


<!-- make jar package -->
<!-- <?xml version="1.0" encoding="ISO-8859-1"?>
<project name="mcc" basedir="." default="jar">
    <property name="source.dir"     value="src"/>
    <property name="lib.dir"        value="lib"/>
    <property name="class.dir"      value="bin"/>
    <property name="jar.dir"        value="dist"/>
    <property name="jar.file"        value="${jar.dir}/${ant.project.name}.jar"/>
    <property name="main-class"     value="Main"/>

    <path id="libraries.path">    
        <fileset dir="${lib.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <target name="clean" description="delete old files">
        <delete dir="${class.dir}"/>
        <delete dir="${jar.dir}"/>
    </target>

    <target name="compile" description="build class files" depends="clean">
        <mkdir dir="${class.dir}"/>
        <javac srcdir="${source.dir}" destdir="${class.dir}">
            <classpath refid="libraries.path"/>
        </javac>
    </target>

    <target name="jar" depends="compile">
        <mkdir dir="${jar.dir}"/>
        <mkdir dir="${class.dir}/${lib.dir}"/>
        <copy todir="${class.dir}/${lib.dir}" flatten="true">
            <path refid="libraries.path"/>
        </copy>

        <manifestclasspath property="manifest.classpath" jarfile="${jar.file}">
            <classpath refid="libraries.path"/>
        </manifestclasspath>

        <jar destfile="${jar.file}" basedir="${class.dir}">
            <manifest>
                <attribute name="Main-Class" value="${main-class}"/>
                <attribute name="Class-Path" value="${manifest.classpath}"/>
            </manifest>
        </jar>  
    </target>

    <target name="run" depends="jar">
        <java jar="${jar.dir}/${ant.project.name}.jar" fork="true"/>
    </target>

</project> -->
